{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kalth\\\\OneDrive\\\\Desktop\\\\clothing brand\\\\FRONTEND\\\\src\\\\Components\\\\PrivateRoute.jsx\";\n// FRONTEND/src/Components/PrivateRoute.jsx\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport jwt from 'jwt-decode'; // Import jwt-decode\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  element: Element,\n  ...rest\n}) => {\n  const token = localStorage.getItem('auth-token');\n  let isAdmin = false;\n\n  // Check if token exists and is valid\n  if (token) {\n    try {\n      const decoded = jwt(token);\n      isAdmin = decoded.role === 'admin'; // Check for the admin role\n    } catch (error) {\n      console.error('JWT decode error:', error);\n    }\n  }\n\n  // Redirect based on authentication and role\n  return isAdmin ? /*#__PURE__*/_jsxDEV(Element, {\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 20\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 44\n  }, this);\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","jwt","jsxDEV","_jsxDEV","PrivateRoute","element","Element","rest","token","localStorage","getItem","isAdmin","decoded","role","error","console","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/kalth/OneDrive/Desktop/clothing brand/FRONTEND/src/Components/PrivateRoute.jsx"],"sourcesContent":["// FRONTEND/src/Components/PrivateRoute.jsx\r\nimport React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport jwt from 'jwt-decode'; // Import jwt-decode\r\n\r\nconst PrivateRoute = ({ element: Element, ...rest }) => {\r\n  const token = localStorage.getItem('auth-token');\r\n  let isAdmin = false;\r\n\r\n  // Check if token exists and is valid\r\n  if (token) {\r\n    try {\r\n      const decoded = jwt(token);\r\n      isAdmin = decoded.role === 'admin'; // Check for the admin role\r\n    } catch (error) {\r\n      console.error('JWT decode error:', error);\r\n    }\r\n  }\r\n\r\n  // Redirect based on authentication and role\r\n  return isAdmin ? <Element {...rest} /> : <Navigate to=\"/login\" />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,GAAG,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,OAAO,EAAEC,OAAO;EAAE,GAAGC;AAAK,CAAC,KAAK;EACtD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAIC,OAAO,GAAG,KAAK;;EAEnB;EACA,IAAIH,KAAK,EAAE;IACT,IAAI;MACF,MAAMI,OAAO,GAAGX,GAAG,CAACO,KAAK,CAAC;MAC1BG,OAAO,GAAGC,OAAO,CAACC,IAAI,KAAK,OAAO,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C;EACF;;EAEA;EACA,OAAOH,OAAO,gBAAGR,OAAA,CAACG,OAAO;IAAA,GAAKC;EAAI;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC,gBAAGhB,OAAA,CAACH,QAAQ;IAACoB,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnE,CAAC;AAACE,EAAA,GAhBIjB,YAAY;AAkBlB,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}